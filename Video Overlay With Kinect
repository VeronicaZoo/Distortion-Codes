import org.openkinect.processing.*;
import java.nio.FloatBuffer;
import processing.video.*;

Kinect2 kinect2;
Capture video;

float minThresh = 480;
float maxThresh = 830;

PImage img;

void setup() {
  size(512, 424);
  kinect2 = new Kinect2(this);
  kinect2.initDepth();
  kinect2.initDevice();
  img = createImage(kinect2.depthWidth, kinect2.depthHeight, RGB);
  video = new Capture(this, 320, 240);
  video.start();
}

void captureEvent(Capture video) {
  video.read();
}

void draw() {
  background(0);
  img.loadPixels();
  //minThresh = map(mouseX, 0, width, 0, 4500);
  //maxThresh = map(mouseY, 0, height, 0, 4500);

  int[] depth = kinect2.getRawDepth();

  //total number of pixels is not the fixed value 
  float sumX = 0;
  float sumY = 0;
  float totalPixels = 0;

  for (int x = 0; x < kinect2.depthWidth; x++) {
    for (int y = 0; y < kinect2.depthHeight; y++) {
      int offset = x + y * kinect2.depthWidth;
      int d = depth[offset];

      //changing the depth threshold (visibility of objects depending on proximity)
      //To change the threshold of how far away things are, change minThresh and maxThresh at the top
      //x > 100 is changing the size what kinect is registering (cutting out registering the wall)
      if (d > minThresh && d < maxThresh && x > 100) {
        img.pixels[offset] = color(255, 20, 190);

        sumX += x;
        sumY += y;
        totalPixels++;
      } else {
        img.pixels[offset] = color(0, 244, 140);
      }
    }
  }
  img.updatePixels();
  image(img, 0, 0);

  //drawing circle on the average point in pixels within threshold
  float avgX = sumX /totalPixels;
  float avgY = sumY / totalPixels;
  fill(150, 0, 255);
  ellipse(avgX, avgY, 64, 64);
  image(video, 0, 0);
  tint(avgX, avgY);
  image(video, 0, 0, avgX, avgY);
}
